// /client/src/components/form_parts/OptionsContainer.jsx

// --------------------------------------------------------------------------------
// ðŸ§© IMPORTS
// --------------------------------------------------------------------------------

import OptionField from "./OptionField"; // Our reusable option input component
import useOptions from "../hooks/useOptions"; // Custom hook to manage dynamic options array
import { ButtonGroup, IconButton } from "@mui/material"; // MUI buttons for add/remove
import AddIcon from "@mui/icons-material/Add"; 
import RemoveIcon from "@mui/icons-material/Remove";

// --------------------------------------------------------------------------------
// ðŸ§  COMPONENT: OptionsContainer
// --------------------------------------------------------------------------------
// Manages a dynamic list of OptionField components.
// Handles adding/removing options and marking one as correct.
// --------------------------------------------------------------------------------

export default function OptionsContainer({
    fieldName = "options",   // ðŸ”¹ Form field base path (used in RHF)
    initialCount = 2,        // ðŸ”¹ Number of initial options
    className,               // ðŸ”¹ CSS class for the container
    minCount = 1,            // ðŸ”¹ Minimum number of options allowed
    maxCount = 12,           // ðŸ”¹ Maximum number of options allowed
}) {
    // ðŸ”¹ Destructure helpers from custom hook
    const { fields, append, remove, toggleCorrect } = useOptions(
        fieldName,
        initialCount
    );

    // ðŸ”¹ Determine if "Add" button should be active
    const canAddMore = fields.length < maxCount;

    // ðŸ”¹ Determine if "Remove" button should be active
    const canRemove = fields.length > minCount;

    return (
        <div>
            {/* ðŸ”¹ Main container for all OptionField components */}
            <div className={className}>
                {fields.map((field, index) => (
                    <OptionField
                        key={field.id} // ðŸ”¹ React key for list rendering
                        name={`question_data.${fieldName}.${index}.text`} 
                        // ðŸ”¹ RHF path to each option text
                        label={`Option ${index + 1}`} 
                        // ðŸ”¹ User-friendly label
                        isCorrect={field.isCorrect} 
                        // ðŸ”¹ Highlight border if correct
                        onToggleCorrect={() => toggleCorrect(index)} 
                        // ðŸ”¹ Mark/unmark this option as correct
                        disableRemove={!canRemove} 
                        // ðŸ”¹ Prevent removing if below minCount
                    />
                ))}
            </div>

            {/* ðŸ”¹ Buttons to dynamically add/remove options */}
            <div>
                <ButtonGroup variant="text">
                    {/* ðŸ”¹ Add button */}
                    <IconButton>
                        <AddIcon
                            onClick={() => {
                                // ðŸ”¹ Only append if under maxCount
                                if (canAddMore)
                                    append({ text: "", isCorrect: false });
                            }}
                            disabled={!canAddMore} // ðŸ”¹ Disable when max reached
                        />
                    </IconButton>

                    {/* ðŸ”¹ Remove button */}
                    <IconButton>
                        <RemoveIcon
                            onClick={() => {
                                // ðŸ”¹ Only remove if above minCount
                                if (canRemove) remove(fields.length - 1);
                            }}
                            disabled={!canRemove} // ðŸ”¹ Disable when min reached
                        />
                    </IconButton>
                </ButtonGroup>
            </div>
        </div>
    );
}


// --------------------------------------------------------------------------------
// ðŸ§­ Developer Insight
// --------------------------------------------------------------------------------
// ðŸ”¹ This component is fully dynamic: supports variable number of options and integrates tightly with RHF.
// ðŸ”¹ useOptions hook abstracts option state logic, keeping the component clean.
// ðŸ”¹ Dynamic RHF path (`question_data.${fieldName}.${index}.text`) allows forms with multiple question types.
// ðŸ”¹ Inline isCorrect styling in OptionField provides immediate visual feedback.
// ðŸ”¹ Scalable: you can add features like drag-and-drop ordering, option validation, or conditional logic.
// ðŸ”¹ Security: inputs are controlled; always sanitize on submit. Avoid direct DOM manipulation here.
